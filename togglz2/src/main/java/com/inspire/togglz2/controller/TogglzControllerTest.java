package com.inspire.togglz2.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.inspire.togglz2.entity.Product;
import com.inspire.togglz2.myFeatures;
import com.inspire.togglz2.service.CircuitBreakerInt;
import com.inspire.togglz2.service.ProductService;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;
import org.togglz.core.Feature;
import org.togglz.core.manager.FeatureManager;
import reactor.core.publisher.Mono;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@RestController
public class TogglzControllerTest {

    private FeatureManager manager;

    //Create a Feature from scratch
    //public static final Feature DISCOUNT=new NamedFeature("DISCOUNT_APPLIED");

    //Get feature from enum
    public static final Feature DISCOUNT= myFeatures.DISCOUNT_APPLIED;
    private static final String CIRCUIT_B="discountCircuit";

    @Autowired
    public TogglzControllerTest(FeatureManager manager){
        this.manager=manager;
   }

   @Autowired
    private ProductService productService;

    @Autowired
    private CircuitBreakerInt circuitBreaker;


    int count=1;
    /*
    Endpoint for Togglz, DISCOUNT will be false on startup
        Togglz endpoint is exposed as an Actuator endpoint

        To get an overview of all toggles, GET http://localhost:8080/actuator/togglz/DISCOUNT_APPLIED

        To change DISCOUNT feature, send POST http://localhost:8080/actuator/togglz/DISCOUNT_APPLIED
        with a body of:
        {
            "name": "DISCOUNT_APPLIED",
            "enabled": true
        }
        To change back to false do the same thing but "enabled": false

    Togglz functionality can also be accessed via the togglz console
        Endpoint for the console is http://localhost:8080/togglz-console/index

    OpenAPI 3.0 documentation is autogenerated at http://localhost:8080/swagger-ui/index.html
     */
    @GetMapping("/products")
    @CircuitBreaker(name = CIRCUIT_B, fallbackMethod = "getAllProductsFallback")
    @Retry(name=CIRCUIT_B)
    public List<Product> getAllProducts() throws JsonProcessingException {

        List<Product> products= productService.getProducts();
        if(manager.isActive(DISCOUNT)){ //checks if Feature toggle is active, true=apply discount, false=regular price
            //Mono<Object[]> response=circuitBreaker.getDiscounted(products); //spring circuitBreaker
            System.out.println("Retry Called: "+count);
            count++;

            WebClient webClient=WebClient.builder().baseUrl("http://localhost:8081").build();

            Mono<Object[]> response=webClient.post().uri("/discounts").header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                    .body(Mono.just(products),Product.class).retrieve().bodyToMono(Object[].class);
            Object[] objects=response.block();

            ObjectMapper objectMapper= new ObjectMapper();
            List<Product> prod= Arrays.stream(objects).map(o -> objectMapper.convertValue(o,Product.class)).collect(Collectors.toList());

             return prod;
        }
        else{
            return products;
        }
    }

    public List<Product> getAllProductsFallback(Exception e){
        return Stream.of(new Product(0, "FallbackProduct", 0.00)).collect(Collectors.toList());
    }


}
